/***  mp9ex01.txt  ***/
/***  s16306  3J43  廣瀬 翔  ***/

1．課題
	プッシュスイッチ0を押した瞬間からLED0は１秒間点灯し、１秒間消灯 し、
	１秒間点灯して動作を終了する。（ON-OFF-ON-OFF） このLED0の動作をLED0定型動作とする。
	プッシュスイッチ1を押した瞬間からLED1は１秒間点灯し、１秒間消灯し、
	１秒間点灯して動作を終了する。（ON-OFF-ON-OFF）このLED1の動作をLED1定型動作とする。
 
	ただし、LED0が定型動作中にプッシュスイッチ0が押されたら、残り定 型動作時間には無関係に、その時点か
	ら新たに定型動作を開始するものとする。
	同様に、LED1が定型動作中にプッシュスイッチ1が押されたら残り定型動作時間には無関係に、その時点から
	新たに定型動作を開始するものとする。
	また、LED0が定型動作中にプッシュスイッチ1が押されたら、LED0の定型動作には影響を与えず、LED1は、
	定型動作を開始するものとする。
	同様に、LED1が定型動作中にプッシュスイッチ0が押されたら、LED1の定型動作には影響を与えず、LED0 は、
	定型動作を開始するものとする。
	この動作も前例題と同様に独立動作である。
	なお，例題では失敗作と成功例があるが，どのように失敗していて，どのようにして成功させたかを考察で述べなさい

2．使用したプログラム

	#include <3048fone.h>
	#include "h8_3048fone.h"

	volatile int count1=-1;/*LED0用カウンタ　-1の時は休止中*/
	volatile int count2=-1;/*LED1用カウンタ　-1の時は休止中*/
	volatile int count3=-1;

	/*ON-OFF-ON-OFF*/

	main()
	{
		initLed();
		initPushSW();/*PushSWの初期化*/
		initTimer1Int(10000); /*時間割り込み10000μsec=10msec ch1使用*/
		E_INT();        /*CPU割り込み許可*/
		startTimer1();  /*時間割り込みタイマスタートch1*/
		while(1) {
			if ((count1==-1 || 50<count1) && checkPushSW(0)==1) { /*0~1s , on*/
				count1=0;
				turnOnLed(0);
			} else if (100<count1 && count1<200) { /*count 1~2s,off*/
				turnOffLed(0);
			} else if (200<count1 && count1<300){ /*count 2~3s,on*/
				turnOnLed(0);
			} else if (300<count1){ /*Off*/
				count1=-1;
				turnOffLed(0);
			}
			if ((count2==-1 || 50<count2) && checkPushSW(1)==1) { /*0~1s , on*/
				count2=0;
				turnOnLed(1);
			} else if (100<count2 && count2<200) { /*count 1~2s,off*/
				turnOffLed(1);
			} else if (200<count2 && count2<300){/*count 2~3s,on*/
				turnOnLed(1);
			} else if (300<count2){ /*Off*/
				count2=-1;
				turnOffLed(1);
			}
		}
	}

	#pragma asm
		.SECTION    MYVEC, DATA, LOCATE=H'000070
		.ORG        H'000070  ;IMIA1
		.DATA.L     _TimerIntFunc
		.SECTION    P,CODE,ALIGN=2 ;これを忘れてはいけない
	#pragma endasm

	#pragma interrupt (TimerIntFunc)
	void TimerIntFunc() /*タイマ割り込みルーチン*/
	{
		static int tick=0;
		clearTimer1Flag();  /*タイマステータスフラグのクリア 忘れないこと*/
		if (count1!=-1) count1++;
		if (count2!=-1) count2++;
	}

3．実行結果
	
	定型動作：
		 LED0 : プッシュスイッチ0を押した瞬間からLED0は１秒間点灯し、
				１秒間消灯し、１秒間点灯して動作を終了する。（ON-OFF-ON-OFF）
		 LED1 : プッシュスイッチ1を押した瞬間からLED1は１秒間点灯し、
				１秒間消灯し、１秒間点灯して動作を終了する。（ON-OFF-ON-OFF）
	
	LED0が定型動作中にプッシュスイッチ0が押されたら、残り定型動作時間には無関係に、
	その時点から新たに定型動作を開始
	
	LED1が定型動作中にプッシュスイッチ1が押されたら、残り定型動作時間には無関係に、
	その時点から新たに定型動作を開始
	
	LED0が定型動作中にプッシュスイッチ1が押されたら、LED0の定型動作には影響を与えず
	LED1は、定型動作を開始
	
	LED1が定型動作中にプッシュスイッチ0が押されたら、LED1の定型動作には影響を与えず
	LED0 は、定型動作を開始
	
4．考察
	
	失敗作と成功例について
	
	失敗作：
		while (count1<200);
		これを使うと，ここでプログラムが2秒ストップ（ループ）してしまう．
		ループ中に
				if (count1==-1 && checkPushSW(0)==1)				
				if (count2==-1 && checkPushSW(1)==1)などの判定ができない．
		よって，対象のLEDが点灯中，他のLEDへの操作ができない．
	
	成功例：
		割り込み関数とLEDに応じて違う変数を使用することで実現している．
		失敗例とは違い，判定を無限に繰り返している．
		（失敗例との違いは判定中に無限ループがあり，待機時間がある）
		その判定に応じて，countの値を変更し，LEDの点灯消灯を変化させているため，
		実現できている．
		また，このプログラムでは，押されてから0~0.5secの間は再び押されても動作は変わらない
		使用になっている．
		これはチャタリング防止や，連打などがあったとしても影響させないようにしているのではないか．

5．まとめ
	割り込み関数を使用した独立操作についてのプログラムを理解した．

