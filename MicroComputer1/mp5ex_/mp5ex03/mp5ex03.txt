/***  mp5ex03.txt  ***/
/***  s16306  3J43  廣瀬 翔  ***/

1．課題
	プッシュスイッチ０を1回押すごとに，LEDの点灯，消灯の切り替えが起こり，
	何回でも繰り返すことができるプログラム。
	正確に言うとプッシュスイッチを押したときには現在の点灯状態はまだ変化せず
	プッシュスイッチから指を離した瞬間に点灯状態が反転するように作りなさい。
	実行の様子を観察し，その様子を実行結果として報告しなさい。
	
	プッシュ　　離す　━┓　　┏━━━━┓　　┏━┓　　┏━
	スイッチ　　押す　　┗━━┛　　　　┗━━┛　┗━━┛　

	ＬＥＤ　　　点灯　━━━━┓　　　　　　　┏━━━━┓
	　　　　　　消灯　　　　　┗━━━━━━━┛　　　　┗━
	注意深く100回ほどプッシュスイッチを押して動作を観察しなさい。
	点灯消灯の交互リズムが崩れ，不安定な動作が起こるかもしれない。「チャタリング」について調べること。
	２つのvoid pushreleaseSW(void)の性能を比較しなさい。
	
2．使用したプログラム

	#include <3048fone.h>
	#include "h8_3048fone.h"

	void pushreleaseSW1(void)
	/*プッシュスイッチが押されるまで待って，*/
	/*その後離されるまで待つ関数			*/
	{
		while (checkPushSW(0)==0);
		while (checkPushSW(0)==1);
	}

	void pushreleaseSW2(void)
	/*プッシュスイッチが押されるまで待って，*/
	/*その後完全に離されるまで待つ関数		*/
	{
		int status=1;
		const int Nantichatter=5000;
		int statuscnt=0;
		while (checkPushSW(0)==0);
		while (status==1) {
			if (checkPushSW(0)==1) {
				statuscnt=0;
			} else {
				statuscnt++;
				if (Nantichatter<statuscnt) {
					status=0;
				}
			}
		}
	}

	main()
	{
		initLed();
		initPushSW();
		while(1) {
			turnOnLed(0);
			pushreleaseSW1();
			/*pushreleaseSW2();*/
			turnOffLed(0);
			pushreleaseSW1();
			/*pushreleaseSW2();*/
		}
	}

3．実行結果
	
	pushreleaseSW1();の場合
	
	スイッチを押す間隔を不規則にしたとき，正しく動作しないことがあった．
	
	スイッチを押して離してもLEDが点灯し続けたり，
	押した瞬間にLEDが消えたりした．
	
	pushreleaseSW();の場合
	
	スイッチを押す間隔にかかわらず正しく動作した．
	
4．考察
	pushreleaseSW1();では正しく動作しなかった
	．
	＝＝＝pushreleaseSW1の中身について＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
	
		while (checkPushSW(0)==0);//スイッチが押されるまで待つ
		while (checkPushSW(0)==1);//スイッチが押されて，離されたら関数が終了
		と単純で分かりやすいものである．
		
	＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
	
	しかし，正しく動作をしない．
	原因として
	「チャタリング」が関係している．
	チャタリングとは，可動接点（スイッチ等）が接触状態になる際に微細で非常に速い
	機械的な振動を起こす現象のことである．
	それによって不安定な信号などが引き起こされる可能性がある．
	
	これを防ぐためにpushreleaseSW2();がある．
	
	＝＝＝pushreleaseSW2の中身について＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
	
	変数constはconstant（定数）の宣言で読み取り専用である．
	
	while (checkPushSW(0)==0);でスイッチが押されるまで待つ．
	その後，離された（と判定された）ときに関数は終了するが，
	
	離された（と判定された）時，statuscntという変数を増やし，
	それが最初に宣言した定数5000より大きくなった時に関数を終了する設定になっている．
	
	よって，一定時間離されたと判定され続けないと，関数は終了できないということがわかるが，
	これは非常に速い機械的信号（チャタリング）を防いでいるものだと読み取れる．
	
	＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
	
	pushreleaseSW2では動作に問題が生じなかったため，
	ここで宣言した定数=5000という値は小坂先生が実験をして定めた数字であると考える．
	
5．まとめ
	スイッチを押して離した時の処理について，チャタリングが必要であることと，
	チャタリングを防ぐための関数の処理手順を理解した．
